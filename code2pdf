#!/usr/bin/env python3
import sys
from os.path import isdir, join
from os import walk, remove

import pypandoc
from pypandoc.pandoc_download import download_pandoc


def get_extension(filename):
    if len(filename.split('.')) <= 1:
        return ''
    return filename.split('.')[-1]


def is_path_in_path(root, path):
    find_pos = root.find(path)

    if find_pos == -1 or len(root) < len(path):
        return False

    if find_pos == 0 and len(path) == len(root):
        return True

    if find_pos == 0 and root[len(path)] == '/':
        return True

    if root[find_pos - 1] == '/' and len(root) == find_pos + len(path):
        return True

    if (root[find_pos - 1] == '/' and len(root) > find_pos + len(path)
            and root[find_pos + len(path)] == '/'):
        return True

    return False


def usage():
    print("USAGE: code2pdf <directory> [options]")
    print("OPTIONS:")
    print("\t-r [dir,file]: To remove dirs and files from generation.")
    print("\t\tDirs and files should be comma separated as in: dir1,dir2/file2,...")
    print("\t-s: To add table of contents in the beggining of the document.")
    print("\t-o [filename]: To set output filename.")


def main(args):
    if len(args) == 0:
        print("ERROR: directory not provided")
        usage()
        return

    if args[0] == '--help' or args[0] == '-h':
        usage()
        return

    if not isdir(args[0]):
        print("ERROR: first argument is not directory")
        usage()
        return

    # params
    exclude_paths = []
    summary = False
    output_file = ''

    i = 0
    exclude_string = ''
    while i < len(args):
        if args[i] == '-r':
            if i + 1 < len(args):
                if args[i + 1][0] == '-':
                    print(
                        "ERROR: excluded files/directories not provided after -e flag")
                    usage()
                    return
                else:
                    i += 1
                    exclude_string = args[i]
            else:
                print("ERROR: excluded files/directories not provided after -e flag")
                usage()
                return

        if args[i] == '-s':
            summary = True

        if args[i] == '-o':
            if i + 1 < len(args):
                if args[i + 1][0] == '-':
                    print("ERROR: output filename not provided after -o flag")
                    usage()
                    return
                else:
                    i += 1
                    output_file = args[i]
            else:
                print("ERROR: output filename not provided after -o flag")
                usage()
                return

        i += 1

    exclude_paths = exclude_string.split(',')

    directory = args[0]
    files = [join(root, name)
             for root, dirs, files in walk(directory)
             for name in files
             if name not in exclude_paths and
             not any([is_path_in_path(root, path)
                      for path in exclude_paths])]

    files = [f for f in files if f not in exclude_paths]

    output = open("out.md", "w")
    output.write("---\nheader-includes: |\n\t\\usepackage{xcolor}\n\t\\lstset{\n\t\tbasicstyle=\\ttfamily,\n\t\tnumbers=left,\n\t\tkeywordstyle=\\color[rgb]{0.13,0.29,0.53}\\bfseries,\n\t\tstringstyle=\\color[rgb]{0.31,0.60,0.02},\n\t\tcommentstyle=\\color[rgb]{0.56,0.35,0.01}\\itshape,\n\t\tnumberstyle=\\footnotesize,\n\t\tstepnumber=1,\n\t\tnumbersep=5pt,\n\t\tbackgroundcolor=\\color[RGB]{248,248,248},\n\t\tshowspaces=false,\n\t\tshowstringspaces=false,\n\t\tshowtabs=false,\n\t\ttabsize=2,\n\t\tcaptionpos=b,\n\t\tbreaklines=true,\n\t\tescapeinside={\\%*}{*)},\n\t\tlinewidth=\\textwidth,\n\t\tbasewidth=0.5em,\n\t}\n---\n\n")

    #\n\t\tbreakatwhitespace=true,
    for idx, code in enumerate(files, 1):
        print(f"LOG: writing file {code} to markdown [{idx}/{len(files)}]")
        output.write(f"# {code}\n```{get_extension(code)} \n")
        with open(code) as src:
            for line in src:
                output.write(line)
        output.write(f"\n```\n\n")

    output.close()

    pandoc_args = [
        '--highlight-style=tango',
        '-V', 'geometry:margin=2cm',
        '--standalone',
        '--pdf-engine=xelatex',
        '--listings'
    ]

    if summary:
        pandoc_args.append('--toc')

    print("LOG: converting markdown to pdf...")

    if output_file == '':
        output_file = 'output.pdf'

    if output_file[-4:] == '.pdf':
        output_file = output_file[:-4]

    result = pypandoc.convert_file('out.md', 'pdf',
                                   outputfile=f'{output_file}.pdf',
                                   extra_args=pandoc_args)

    remove('out.md')
    return


# TODO(#5): fix line breaking on code blocks
if __name__ == "__main__":
    main(sys.argv[1:])
